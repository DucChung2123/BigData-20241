
services:
  # PostgreSQL Database
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: crime
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data  

  # Redis for CeleryExecutor
  redis:
    image: redis:7.2-bookworm
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 5
    restart: always

  # Airflow Webserver
  airflow-webserver:
    build:
      context: ./airflow/docker
      dockerfile: Dockerfile
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8090:8080"
    environment:
      AIRFLOW__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin:admin@postgres/crime
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: airflow
      _AIRFLOW_WWW_USER_PASSWORD: airflow
      AIRFLOW_CONN_DATA_INGESTION_SERVICE: http://data_ingestion_service:8000
      AIRFLOW_CONN_SPARK_DEFAULT: spark://spark-master:7077
    depends_on:
      - redis
      - postgres
      - airflow-init
    volumes:
      - ./spark/jars:/opt/airflow/jars
      - ./spark/jobs:/opt/airflow/app
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - airflow-logs:/opt/airflow/logs

  # Airflow Scheduler
  airflow-scheduler:
    build:
      context: ./airflow/docker
      dockerfile: Dockerfile
    container_name: airflow-scheduler
    command: scheduler
    depends_on:
      airflow-init:
        condition: service_healthy
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - airflow-logs:/opt/airflow/logs
    environment:
      AIRFLOW__EXECUTOR: CeleryExecutor
      AIRFLOW_CONN_SPARK_DEFAULT: spark://spark-master:7077
      AIRFLOW_CONN_DATA_INGESTION_SERVICE: http://data_ingestion_service:8000
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin:admin@postgres/crime


  # Airflow Init Service
  airflow-init:
    build:
      context: ./airflow/docker
      dockerfile: Dockerfile
    container_name: airflow-init
    command: >
      bash -c "
      airflow db migrate &&
      airflow users create \
        --username airflow \
        --password airflow \
        --firstname Airflow \
        --lastname Admin \
        --role Admin \
        --email admin@example.com
      "
    environment:
      AIRFLOW__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin:admin@postgres/crime
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD-SHELL", "airflow db check"]
      interval: 10s
      timeout: 30s
      retries: 5


  # Airflow Worker
  airflow-worker:
    build:
      context: ./airflow/docker
      dockerfile: Dockerfile
    container_name: airflow-worker
    command: celery --app airflow.executors.celery_executor worker --pool=solo --concurrency=1 --loglevel=info


    depends_on:
      - airflow-webserver
      - redis
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - airflow-logs:/opt/airflow/logs
      - ./spark/jars:/opt/airflow/jars
      - ./spark/jobs:/opt/airflow/app
    environment:
      AIRFLOW_CONN_SPARK_DEFAULT: spark://spark-master:7077
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://admin:admin@postgres/crime
      AIRFLOW__CORE__FERNET_KEY: ''



  # Spark Master
  spark-master:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARL_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
    ports:
      - "7077:7077"
      - "8080:8080"
    volumes:
      - ./spark/jars:/opt/spark/jars
      - ./spark/jobs:/opt/spark/app
    depends_on:
      - hdfs-namenode
      - postgres

  # Spark Worker 1
  spark-worker-1:
    image: bitnami/spark:latest
    container_name: spark-worker-1
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    volumes:
      - ./spark/jars:/opt/spark/jars
      - ./spark/jobs:/opt/spark/app
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G

  # Spark Worker 2
  spark-worker-2:
    image: bitnami/spark:latest
    container_name: spark-worker-2
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    depends_on:
      - spark-master
    ports:
      - "8082:8081"
    volumes:
      - ./spark/jars:/opt/spark/jars
      - ./spark/jobs:/opt/spark/app
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G

  # Spark Worker 3
  spark-worker-3:
    image: bitnami/spark:latest
    container_name: spark-worker-3
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    depends_on:
      - spark-master
    ports:
      - "8083:8081"
    volumes:
      - ./spark/jars:/opt/spark/jars
      - ./spark/jobs:/opt/spark/app
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G

  # HDFS Namenode
  hdfs-namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: hdfs-namenode
    environment:
      - CLUSTER_NAME=test
      - CORE_CONF_fs_defaultFS=hdfs://hdfs-namenode:9000
      - HDFS_CONF_dfs_replication=3
      - HDFS_CONF_dfs_webhdfs_enabled=true
    volumes:
      - ./hdfs/namenode:/hadoop/dfs/name
    ports:
      - "9870:9870"
      - "9000:9000"

  # HDFS Datanodes
  hdfs-datanode-1:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: hdfs-datanode-1
    depends_on:
      - hdfs-namenode
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://hdfs-namenode:9000
    volumes:
      - ./hdfs/datanode-1:/hadoop/dfs/data
    ports:
      - "50075:50075"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: '2G'

  hdfs-datanode-2:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: hdfs-datanode-2
    depends_on:
      - hdfs-namenode
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://hdfs-namenode:9000
    volumes:
      - ./hdfs/datanode-2:/hadoop/dfs/data
    ports:
      - "50076:50075"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: '2G'

  hdfs-datanode-3:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: hdfs-datanode-3
    depends_on:
      - hdfs-namenode
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://hdfs-namenode:9000
    volumes:
      - ./hdfs/datanode-3:/hadoop/dfs/data
    ports:
      - "50077:50075"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: '2G'

  # Data Ingestion Service
  data_ingestion_service:
    build:
      context: ./data_ingestion_service
      dockerfile: Dockerfile
    container_name: data_ingestion_service
    environment:
      - HDFS_URL=http://hdfs-namenode:9870
      - HDFS_USER=root
    depends_on:
      - hdfs-namenode
    ports:
      - "8000:8000"
    volumes:
      - ./data_ingestion_service/src/data:/app/src/data  

volumes:
  postgres-data:
  airflow-logs:
  airflow-dags:
  airflow-plugins:
  hdfs-namenode:
  hdfs-datanode-1:
  hdfs-datanode-2:
  hdfs-datanode-3:
